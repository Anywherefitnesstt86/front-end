{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js\";\nimport TextInput from './TextInput.js';\n\nfunction NewUserForm(props) {\n  const {\n    user,\n    setUser,\n    newUserFormValues,\n    setNewUserFormValues,\n    newUserFormErrors,\n    setNewUserFormErrors,\n    newUserDisabled,\n    setNewUserDisabled\n  } = props; // -------------------- Helper Functions -----------------\n\n  const postNewUser = newUser => {\n    axios.post('https://reqres.in/api/pizza', newUser).then(res => {\n      setNew(res.data);\n      console.log(\"New Pizza: \", res.data);\n      console.log(\"Successful res back from Axios, res.data: \", res.data);\n      setFormValues(initialFormValues); // reset form\n\n      history.push(`/pizza/order`); // route to order conf page\n    }).catch(err => {\n      console.log(\"Error: \", err);\n      history.push(`/error`);\n      debugger;\n    });\n  }; // posts and resets form\n\n\n  const validate = (name, value) => {\n    console.log(\"validate: \", name, value);\n    yup.reach(schema, name).validate(value).then(() => setFormErrors({ ...formErrors,\n      [name]: ''\n    })).catch(err => setFormErrors({ ...formErrors,\n      [name]: err.errors[0]\n    }));\n    console.log(\"passes form validation\");\n  }; // run validation with yup\n\n\n  return /*#__PURE__*/_jsxDEV(TextInput, {\n    type: \"text\",\n    name: \"personName\",\n    placeholder: \" add your name here \",\n    onChange: inputChange,\n    value: newUserFormValues.personName,\n    label: \"Name\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_c = NewUserForm;\nexport default NewUserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewUserForm\");","map":{"version":3,"sources":["/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js"],"names":["TextInput","NewUserForm","props","user","setUser","newUserFormValues","setNewUserFormValues","newUserFormErrors","setNewUserFormErrors","newUserDisabled","setNewUserDisabled","postNewUser","newUser","axios","post","then","res","setNew","data","console","log","setFormValues","initialFormValues","history","push","catch","err","validate","name","value","yup","reach","schema","setFormErrors","formErrors","errors","inputChange","personName"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;;AAGA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,iBAAjB;AAAoCC,IAAAA,oBAApC;AAA0DC,IAAAA,iBAA1D;AAA6EC,IAAAA,oBAA7E;AAAmGC,IAAAA,eAAnG;AAAoHC,IAAAA;AAApH,MAA2IR,KAAjJ,CAD2B,CAG7B;;AACA,QAAMS,WAAW,GAAGC,OAAO,IAAI;AAC7BC,IAAAA,KAAK,CAACC,IAAN,CAAW,6BAAX,EAA0CF,OAA1C,EACGG,IADH,CACQC,GAAG,IAAI;AACXC,MAAAA,MAAM,CAACD,GAAG,CAACE,IAAL,CAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,GAAG,CAACE,IAA/B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DJ,GAAG,CAACE,IAA9D;AAEAG,MAAAA,aAAa,CAACC,iBAAD,CAAb,CALW,CAKuB;;AAElCC,MAAAA,OAAO,CAACC,IAAR,CAAc,cAAd,EAPW,CAOmB;AAI/B,KAZH,EAaGC,KAbH,CAaSC,GAAG,IAAI;AACZP,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBM,GAAvB;AACAH,MAAAA,OAAO,CAACC,IAAR,CAAc,QAAd;AACA;AACD,KAjBH;AAkBD,GAnBD,CAJ6B,CAuB3B;;;AAEF,QAAMG,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClCV,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,IAA1B,EAAgCC,KAAhC;AACAC,IAAAA,GAAG,CAACC,KAAJ,CAAUC,MAAV,EAAkBJ,IAAlB,EACCD,QADD,CACUE,KADV,EAECd,IAFD,CAEM,MAAMkB,aAAa,CAAC,EAAE,GAAGC,UAAL;AAAiB,OAACN,IAAD,GAAQ;AAAzB,KAAD,CAFzB,EAGCH,KAHD,CAGOC,GAAG,IAAIO,aAAa,CAAC,EAAE,GAAGC,UAAL;AAAiB,OAACN,IAAD,GAAQF,GAAG,CAACS,MAAJ,CAAW,CAAX;AAAzB,KAAD,CAH3B;AAKAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACC,GARD,CAzB6B,CAiC1B;;;AAGD,sBAGE,QAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,WAAW,EAAC,sBAHd;AAIE,IAAA,QAAQ,EAAEgB,WAJZ;AAKE,IAAA,KAAK,EAAE/B,iBAAiB,CAACgC,UAL3B;AAME,IAAA,KAAK,EAAE;AANT;AAAA;AAAA;AAAA;AAAA,UAHF;AAYD;;KAhDQpC,W;AAkDT,eAAeA,WAAf","sourcesContent":["import TextInput from './TextInput.js';\n\n\nfunction NewUserForm (props) {\n  const { user, setUser, newUserFormValues, setNewUserFormValues, newUserFormErrors, setNewUserFormErrors, newUserDisabled, setNewUserDisabled } = props\n\n// -------------------- Helper Functions -----------------\nconst postNewUser = newUser => {\n  axios.post('https://reqres.in/api/pizza', newUser)\n    .then(res => {\n      setNew(res.data)\n      console.log(\"New Pizza: \", res.data);\n      console.log(\"Successful res back from Axios, res.data: \", res.data);\n\n      setFormValues(initialFormValues); // reset form\n\n      history.push(`/pizza/order`); // route to order conf page\n\n\n\n    })\n    .catch(err => {\n      console.log(\"Error: \", err)\n      history.push(`/error`)\n      debugger\n    })\n} // posts and resets form\n\nconst validate = (name, value) => {\nconsole.log(\"validate: \", name, value)\nyup.reach(schema, name)\n.validate(value)\n.then(() => setFormErrors({ ...formErrors, [name]: ''}))\n.catch(err => setFormErrors({ ...formErrors, [name]: err.errors[0] }))\n\nconsole.log(\"passes form validation\")\n}; // run validation with yup\n\n\n  return (\n\n\n    <TextInput\n      type=\"text\"\n      name=\"personName\"\n      placeholder=\" add your name here \"\n      onChange={inputChange} \n      value={newUserFormValues.personName}\n      label={\"Name\"}\n    />\n  )\n}\n\nexport default NewUserForm;"]},"metadata":{},"sourceType":"module"}