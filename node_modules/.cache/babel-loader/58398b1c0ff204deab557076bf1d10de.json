{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js\";\nimport TextInput from './TextInput.js';\n\nfunction NewUserForm(props) {\n  const {\n    user,\n    setUser,\n    newUserFormValues,\n    setNewUserFormValues,\n    newUserFormErrors,\n    setNewUserFormErrors,\n    newUserDisabled,\n    setNewUserDisabled\n  } = props; // -------------------- Helper Functions -----------------\n  // -------------------- Event Handlers -----------------\n\n  const inputChange = e => {\n    const {\n      name,\n      type,\n      value,\n      checked\n    } = e.target; // console.log(`name: ${name}, value: ${value}`);\n\n    const inputValue = type === 'checkbox' ? checked : value;\n    console.log(\"inputValue: \", inputValue);\n    validate(name, inputValue);\n    setNewUserFormValues({ ...newUserFormValues,\n      [name]: inputValue\n    }); // [ ] is not an array\n  };\n\n  const formSubmit = e => {\n    console.log(\"form was submitted\");\n    e.preventDefault(); //  to prevent browser refresh\n\n    const newUser = {\n      personName: newUserFormValues.personName,\n      email: newUserFormValues.email,\n      age: newUserFormValues.age,\n      password: newUserFormValues.password\n    };\n    console.log(\"new user: \", newUser);\n    postNewUser(newUser); // post new user using helper function postNewUser\n\n    history.push(`/`); // back to home page\n  };\n\n  return /*#__PURE__*/_jsxDEV(TextInput, {\n    type: \"text\",\n    name: \"personName\",\n    placeholder: \" add your name here \",\n    onChange: inputChange,\n    value: newUserFormValues.personName,\n    label: \"Name\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = NewUserForm;\nexport default NewUserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewUserForm\");","map":{"version":3,"sources":["/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js"],"names":["TextInput","NewUserForm","props","user","setUser","newUserFormValues","setNewUserFormValues","newUserFormErrors","setNewUserFormErrors","newUserDisabled","setNewUserDisabled","inputChange","e","name","type","value","checked","target","inputValue","console","log","validate","formSubmit","preventDefault","newUser","personName","email","age","password","postNewUser","history","push"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;;AAGA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,iBAAjB;AAAoCC,IAAAA,oBAApC;AAA0DC,IAAAA,iBAA1D;AAA6EC,IAAAA,oBAA7E;AAAmGC,IAAAA,eAAnG;AAAoHC,IAAAA;AAApH,MAA2IR,KAAjJ,CAD2B,CAG7B;AAKE;;AAGA,QAAMS,WAAW,GAAIC,CAAD,IAAO;AACzB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,KAAd;AAAqBC,MAAAA;AAArB,QAAiCJ,CAAC,CAACK,MAAzC,CADyB,CAEzB;;AACA,UAAMC,UAAU,GAAGJ,IAAI,KAAK,UAAT,GAAsBE,OAAtB,GAAgCD,KAAnD;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,UAA5B;AACAG,IAAAA,QAAQ,CAACR,IAAD,EAAOK,UAAP,CAAR;AACAZ,IAAAA,oBAAoB,CAAC,EAAE,GAAGD,iBAAL;AAAwB,OAACQ,IAAD,GAAQK;AAAhC,KAAD,CAApB,CANyB,CAM2C;AACrE,GAPD;;AASA,QAAMI,UAAU,GAAIV,CAAD,IAAO;AAExBO,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACER,IAAAA,CAAC,CAACW,cAAF,GAHsB,CAGF;;AAEpB,UAAMC,OAAO,GAAG;AACZC,MAAAA,UAAU,EAAEpB,iBAAiB,CAACoB,UADlB;AAEZC,MAAAA,KAAK,EAAErB,iBAAiB,CAACqB,KAFb;AAGZC,MAAAA,GAAG,EAAEtB,iBAAiB,CAACsB,GAHX;AAIZC,MAAAA,QAAQ,EAAEvB,iBAAiB,CAACuB;AAJhB,KAAhB;AAOAT,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,OAA1B;AACAK,IAAAA,WAAW,CAACL,OAAD,CAAX,CAbsB,CAaD;;AAErBM,IAAAA,OAAO,CAACC,IAAR,CAAc,GAAd,EAfsB,CAeH;AACtB,GAhBD;;AAoBA,sBAGE,QAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,WAAW,EAAC,sBAHd;AAIE,IAAA,QAAQ,EAAEpB,WAJZ;AAKE,IAAA,KAAK,EAAEN,iBAAiB,CAACoB,UAL3B;AAME,IAAA,KAAK,EAAE;AANT;AAAA;AAAA;AAAA;AAAA,UAHF;AAYD;;KApDQxB,W;AAsDT,eAAeA,WAAf","sourcesContent":["import TextInput from './TextInput.js';\n\n\nfunction NewUserForm (props) {\n  const { user, setUser, newUserFormValues, setNewUserFormValues, newUserFormErrors, setNewUserFormErrors, newUserDisabled, setNewUserDisabled } = props\n\n// -------------------- Helper Functions -----------------\n\n\n\n\n  // -------------------- Event Handlers -----------------\n\n\n  const inputChange = (e) => {\n    const { name, type, value, checked } = e.target;\n    // console.log(`name: ${name}, value: ${value}`);\n    const inputValue = type === 'checkbox' ? checked : value;\n    console.log(\"inputValue: \", inputValue)\n    validate(name, inputValue);\n    setNewUserFormValues({ ...newUserFormValues, [name]: inputValue }); // [ ] is not an array\n  } \n\n  const formSubmit = (e) => {\n\n    console.log(\"form was submitted\")\n      e.preventDefault(); //  to prevent browser refresh\n\n      const newUser = {\n          personName: newUserFormValues.personName,\n          email: newUserFormValues.email,\n          age: newUserFormValues.age,\n          password: newUserFormValues.password,\n      }\n\n      console.log(\"new user: \", newUser)\n      postNewUser(newUser) // post new user using helper function postNewUser\n\n      history.push(`/`); // back to home page\n  };\n\n\n\n  return (\n\n\n    <TextInput\n      type=\"text\"\n      name=\"personName\"\n      placeholder=\" add your name here \"\n      onChange={inputChange} \n      value={newUserFormValues.personName}\n      label={\"Name\"}\n    />\n  )\n}\n\nexport default NewUserForm;"]},"metadata":{},"sourceType":"module"}