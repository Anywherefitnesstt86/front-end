[{"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/index.js":"1","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/App.js":"2","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/reportWebVitals.js":"3","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js":"4","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/TextInput.js":"5","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/Classes.js":"6","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/Class.js":"7"},{"size":500,"mtime":1611796659888,"results":"8","hashOfConfig":"9"},{"size":3614,"mtime":1611970657303,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611796659889,"results":"11","hashOfConfig":"9"},{"size":6295,"mtime":1611981762443,"results":"12","hashOfConfig":"9"},{"size":216,"mtime":1611808567573,"results":"13","hashOfConfig":"9"},{"size":3143,"mtime":1611990391023,"results":"14","hashOfConfig":"9"},{"size":1941,"mtime":1611990755601,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1lwwr5j",{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/index.js",[],["33","34"],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/App.js",["35","36","37","38","39","40","41","42","43"],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from \"react\";\nimport NewUserForm from './Components/NewUserForm';\n// import Header from './Components/Header';\nimport Classes from './Components/Classes';\nimport Class from './Components/Class';\n\n\n  // -------------------------- INITIAL STATES ------------------------\n\n\n  const initialNewUserFormValues = {\n    personName: '',\n    email: '',\n    isOverEighteen: false,\n    password: '',\n    isInstructor: false\n  };\n  const initialNewUserFormErrors = {\n    personName: '',\n    email: '',\n    isOverEighteen: false,\n    password: '',\n    isInstructor: false\n  };\n  const initialNewUserDisabled = false; // change back to true after testing\n\n  // Intitial States - Classes\n  const initialClassesValues = [\n    {\n      className: \"Yoga On The Beach\",\n      classType: \"Yoga\",\n      classDate: \"2021/10/30\",\n      startTime: \"10:00am\",\n      duration: 1, // hours\n      intensity: \"low\",\n      location: \"Public Beach\",\n      numberOfStudents: 8, \n      maxClassSize: 10\n    },\n    {\n      className: \"Strong Men\",\n      classType: \"Weights\",\n      classDate: \"2021/10/31\",\n      startTime: \"9:00am\",\n      duration: 1, // hours\n      intensity: \"high\",\n      location: \"Anywhere\",\n      numberOfStudents: 10, \n      maxClassSize: 10\n    } \n  ]\n  const initialClassesErrors = [\n    {\n      className: \"\",\n      classType: \"\",\n      classDate: \"\",\n      startTime: \"\",\n      duration: \"\", \n      intensity: \"\",\n      location: \"\",\n      numberOfStudents: \"\", \n      maxClassSize: \"\"\n    } \n  ]\n\nfunction App() {\n  // --------------------------- STATES -------------------------------\n  const [user, setUser] = useState({}); // empty object user\n  // -------- States for NewUserForm.js ----------\n  const [newUserFormValues, setNewUserFormValues] = useState(initialNewUserFormValues); // form inputs\n  const [newUserFormErrors, setNewUserFormErrors] = useState(initialNewUserFormErrors); // errors, mechanism for reset\n  const [newUserDisabled, setNewUserDisabled] = useState(initialNewUserDisabled) // for button or toggle\n  // -------- States for LoginForm.js ----------\n  const [loginFormValues, setLoginFormValues] = useState({}); // form inputs\n  const [loginFormErrors, setLoginFormErrors] = useState({}); // errors, mechanism for reset\n  const [loginDisabled, setLoginDisabled] = useState({}) // for button or toggle\n  // -------- States for Classes.js & Search Functionality ----------\n  const [ allClasses, setAllClasses ] = useState(initialClassesValues);\n  const [ filteredClasses, setFilteredClasses ] = useState(initialClassesValues);\n  const [ searchTerm, setSearchTerm ] = useState('');\n\n  return (\n    <div className=\"App\">\n\n      {/* Route to Create New User Form */}\n        {/* <Header/> */}\n        <NewUserForm \n          user={user} \n          setUser={setUser} \n          newUserFormValues={newUserFormValues} \n          setNewUserFormValues={setNewUserFormValues} \n          newUserFormErrors={newUserFormErrors} \n          newUsersetFormErrors={setNewUserFormErrors} \n          newUserDisabled={newUserDisabled} \n          setNewUserDisabled={setNewUserDisabled} \n          />\n\n      {/* Route to User Login Form  */}\n\n      {/* Route to view Classes  */}\n      <Classes\n        allClasses={allClasses}\n        setClasses={setAllClasses}\n        filteredClasses={filteredClasses}\n        setFilteredClasses={setFilteredClasses}\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n      />\n\n      {/* Route to view Class  */}\n\n      {/* Route to Homepage */}\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/reportWebVitals.js",[],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js",["44","45","46","47","48","49","50","51"],"import React, { useState, useEffect } from 'react';\nimport TextInput from './TextInput.js';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport './newUserForm.css';\n\n// import schema from './formSchema.js';\n// import Header from './Header';\n// import Footer from './Footer';\n\n\nconst initialNewUserFormValues = {\n  personName: '',\n  email: '',\n  isOverEighteen: false,\n  password: '',\n  isInstructor: false\n};\nconst initialNewUserFormErrors = {\n  personName: '',\n  email: '',\n  isOverEighteen: '',\n  password: '',\n  isInstructor: ''\n};\n\n\nfunction NewUserForm (props) {\n  const { user, setUser, newUserFormValues, setNewUserFormValues, newUserFormErrors, setNewUserFormErrors, newUserDisabled, setNewUserDisabled } = props\n\n  const history = useHistory();\n\n  // -------------------- Helper Functions -----------------\n\n  const postNewUser = newUser => {\n    axios.post('https://pt-fitness.herokuapp.com/', newUser)\n      .then(res => {\n        setUser(res.data)\n        console.log(\"New User \", res.data);\n        console.log(\"Successful res back from Axios, res.data: \", res.data);\n\n        setNewUserFormValues(initialNewUserFormValues); // reset form\n\n        history.push(`/`); // route to home page\n\n      })\n      .catch(err => {\n        console.log(\"Error: \", err)\n        history.push(`/error`)\n        debugger\n      })\n  } // posts and resets form\n\n  const validate = (name, value) => {\n  console.log(\"validate: \", name, value)\n  // yup.reach(schema, name)\n  //   .validate(value)\n  //   .then(() => setNewUserFormErrors({ ...newUserFormErrors, [name]: ''}))\n  //   .catch(err => setNewUserFormErrors({ ...newUserFormErrors, [name]: err.errors[0] })) // pending schema\n\n    console.log(\"passes form validation\")\n  }; // run validation with yup\n\n  // -------------------- Event Handlers -----------------\n\n  const inputChange = (e) => {\n    const { name, type, value, checked } = e.target;\n    console.log(`name: ${name}, value: ${value}`);\n    const inputValue = type === 'checkbox' ? checked : value;  // option to include checkbox\n    console.log(\"inputValue: \", inputValue)\n    // validate(name, inputValue);\n    setNewUserFormValues({ ...newUserFormValues, [name]: inputValue }); // [ ] is not an array\n  } \n\n  const formSubmit = (e) => {\n\n    console.log(\"form was submitted\")\n      e.preventDefault(); //  to prevent browser refresh\n\n      const newUser = {\n          personName: newUserFormValues.personName,\n          email: newUserFormValues.email,\n          isOverEighteen: newUserFormValues.isOverEighteen,\n          password: newUserFormValues.password,\n          isInstructor: newUserFormValues.isInstructor\n      }\n\n      console.log(\"new user: \", newUser)\n      // postNewUser(newUser) // post new user using helper function postNewUser\n\n      // history.push(`/`); // back to home page\n  };\n\n  // -------------------- Side Effects -----------------\n\n  useEffect(() => {\n    // schema.isValid(newUserFormValues).then(valid => setNewUserDisabled(!valid)) // pending schema\n    // console.log(\"disabled?\")\n    }, [newUserFormValues]); // Adjust the status of 'disabled\" every time formValues changes\n\n  // useEffect(() => {\n  //   console.log(\"The form Errors have changed\", newUserFormErrors)\n  // }, [newUserFormErrors]);\n\n\n  return (\n    <>\n        {/* <Header/> */}\n        <div className='background-newUserForm'>\n        \n          <div className='newUserForm-container'>\n          <form className='newUserForm' onSubmit={formSubmit}>\n              <div className='newUserForm-title'>\n                <h1 >New User Login</h1>\n              </div>\n\n              <TextInput\n                type=\"text\"\n                name=\"personName\"\n                placeholder=\" add your name here \"\n                onChange={inputChange} \n                value={newUserFormValues.personName}\n                label={\"Name\"}\n              />\n              <div>{newUserFormErrors.personName}</div>\n\n              <TextInput\n                type=\"text\"\n                name=\"email\"\n                placeholder=\" email address \"\n                onChange={inputChange} \n                value={newUserFormValues.email}\n                label={\"Email\"}\n              />\n              <div>{newUserFormErrors.email}</div>\n\n              <TextInput\n                type=\"text\"\n                name=\"password\"\n                placeholder=\" enter new password \"\n                onChange={inputChange} \n                value={newUserFormValues.password}\n                label={\"Password\"}\n              />\n              <div>{newUserFormErrors.password}</div>\n\n              <div className='newUserForm-radio'>\n              <input type=\"radio\" name=\"isOverEighteen\" onChange={inputChange} value={true}/>Are you over 18 years of age?\n              </div>\n              <div>{newUserFormErrors.isOverEighteen}</div>\n    \n\n              <div className='newUserForm-slider'>\n                  <div className=\"slider-container\">\n                  <label className=\"switch\">\n                    <input id=\"isInstructorInput\" type=\"checkbox\" name=\"isInstructor\"\n                    checked={newUserFormValues.isInstructor} onChange={inputChange}/> \n                    <span className=\"slider\"></span><br/>\n                  </label>\n                  <p className=\"slider-text\">Are you an instructor?</p>\n                  \n                  </div>\n              </div>\n\n              {newUserFormValues.isInstructor ? \n                <div>\n                    <p>Welcome! You should have received an instructor code by email.  Please enter it below.</p>\n                    <TextInput\n                      type=\"text\"\n                      name=\"authCode\"\n                      placeholder=\" Instructor Code\"\n                      onChange={inputChange} \n                      value={newUserFormValues.authCode}\n                      label={\" \"}\n                    />\n                </div>\n              : <br/> /* conditional rendering for instructor authorization code */  }\n\n\n              <br/>\n              <br/>\n              <button  id=\"submitBtn\" newUserDisabled={newUserDisabled}>Submit</button> \n\n          </form>\n          </div>\n          </div>\n      \n        {/* <Footer/> */}\n\n    </>\n  )\n}\n\nexport default NewUserForm;","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/TextInput.js",[],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/Classes.js",["52","53"],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/Class.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":7,"column":8,"nodeType":"60","messageId":"61","endLine":7,"endColumn":13},{"ruleId":"58","severity":1,"message":"63","line":54,"column":9,"nodeType":"60","messageId":"61","endLine":54,"endColumn":29},{"ruleId":"58","severity":1,"message":"64","line":76,"column":10,"nodeType":"60","messageId":"61","endLine":76,"endColumn":25},{"ruleId":"58","severity":1,"message":"65","line":76,"column":27,"nodeType":"60","messageId":"61","endLine":76,"endColumn":45},{"ruleId":"58","severity":1,"message":"66","line":77,"column":10,"nodeType":"60","messageId":"61","endLine":77,"endColumn":25},{"ruleId":"58","severity":1,"message":"67","line":77,"column":27,"nodeType":"60","messageId":"61","endLine":77,"endColumn":45},{"ruleId":"58","severity":1,"message":"68","line":78,"column":10,"nodeType":"60","messageId":"61","endLine":78,"endColumn":23},{"ruleId":"58","severity":1,"message":"69","line":78,"column":25,"nodeType":"60","messageId":"61","endLine":78,"endColumn":41},{"ruleId":"58","severity":1,"message":"70","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"71","line":4,"column":13,"nodeType":"60","messageId":"61","endLine":4,"endColumn":16},{"ruleId":"58","severity":1,"message":"72","line":20,"column":7,"nodeType":"60","messageId":"61","endLine":20,"endColumn":31},{"ruleId":"58","severity":1,"message":"73","line":30,"column":11,"nodeType":"60","messageId":"61","endLine":30,"endColumn":15},{"ruleId":"58","severity":1,"message":"74","line":30,"column":86,"nodeType":"60","messageId":"61","endLine":30,"endColumn":106},{"ruleId":"58","severity":1,"message":"75","line":30,"column":125,"nodeType":"60","messageId":"61","endLine":30,"endColumn":143},{"ruleId":"58","severity":1,"message":"76","line":36,"column":9,"nodeType":"60","messageId":"61","endLine":36,"endColumn":20},{"ruleId":"58","severity":1,"message":"77","line":55,"column":9,"nodeType":"60","messageId":"61","endLine":55,"endColumn":17},{"ruleId":"58","severity":1,"message":"78","line":10,"column":23,"nodeType":"60","messageId":"61","endLine":10,"endColumn":36},{"ruleId":"58","severity":1,"message":"79","line":10,"column":75,"nodeType":"60","messageId":"61","endLine":10,"endColumn":85},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Class' is defined but never used.","'initialClassesErrors' is assigned a value but never used.","'loginFormValues' is assigned a value but never used.","'setLoginFormValues' is assigned a value but never used.","'loginFormErrors' is assigned a value but never used.","'setLoginFormErrors' is assigned a value but never used.","'loginDisabled' is assigned a value but never used.","'setLoginDisabled' is assigned a value but never used.","'useState' is defined but never used.","'yup' is defined but never used.","'initialNewUserFormErrors' is assigned a value but never used.","'user' is assigned a value but never used.","'setNewUserFormErrors' is assigned a value but never used.","'setNewUserDisabled' is assigned a value but never used.","'postNewUser' is assigned a value but never used.","'validate' is assigned a value but never used.","'setAllClasses' is assigned a value but never used.","'searchTerm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]