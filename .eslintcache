[{"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/index.js":"1","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/App.js":"2","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/reportWebVitals.js":"3","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js":"4","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/TextInput.js":"5","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/Footer.js":"6"},{"size":500,"mtime":1611796659888,"results":"7","hashOfConfig":"8"},{"size":1835,"mtime":1611808567572,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611796659889,"results":"10","hashOfConfig":"8"},{"size":4826,"mtime":1611814534453,"results":"11","hashOfConfig":"8"},{"size":216,"mtime":1611808567573,"results":"12","hashOfConfig":"8"},{"size":396,"mtime":1611814323159,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1lwwr5j",{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/index.js",[],["30","31"],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/App.js",["32","33","34","35","36","37","38"],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from \"react\";\nimport NewUserForm from './Components/NewUserForm';\n\n\n  // -------------------------- INITIAL STATES ------------------------\n\n  const initialNewUserFormValues = {\n    personName: '',\n    email: '',\n    age: '',\n    password: '',\n  };\n\n  const initialNewUserFormErrors = {\n    personName: '',\n    email: '',\n    age: '',\n    password: '',\n  };\n\n  const initialNewUserDisabled = false; // change back to true after testing\n\nfunction App() {\n  // --------------------------- STATES -------------------------------\n  const [user, setUser] = useState({}); // empty object user\n\n  const [newUserFormValues, setNewUserFormValues] = useState(initialNewUserFormValues); // form inputs\n  const [newUserFormErrors, setNewUserFormErrors] = useState(initialNewUserFormErrors); // errors, mechanism for reset\n  const [newUserDisabled, setNewUserDisabled] = useState(initialNewUserDisabled) // for button or toggle\n\n  const [loginFormValues, setLoginFormValues] = useState({}); // form inputs\n  const [loginFormErrors, setLoginFormErrors] = useState({}); // errors, mechanism for reset\n  const [loginDisabled, setLoginDisabled] = useState({}) // for button or toggle\n\n\n\n  return (\n    <div className=\"App\">\n\n      {/* Route to Create New User Form */}\n        <NewUserForm \n          user={user} \n          setUser={setUser} \n          newUserFormValues={newUserFormValues} \n          setNewUserFormValues={setNewUserFormValues} \n          newUserFormErrors={newUserFormErrors} \n          newUsersetFormErrors={setNewUserFormErrors} \n          newUserDisabled={newUserDisabled} \n          setNewUserDisabled={setNewUserDisabled} \n          />\n\n      {/* Route to User Login Form  */}\n\n      {/* Route to Homepage */}\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/reportWebVitals.js",[],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/NewUserForm.js",["39","40","41","42","43","44","45","46","47"],"import React, { useState, useEffect } from 'react';\nimport TextInput from './TextInput.js';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-dom';\n// import schema from './formSchema.js';\n// import Header from './Header';\n// import Footer from './Footer';\n\n\nconst initialNewUserFormValues = {\n  personName: '',\n  email: '',\n  age: '',\n  password: '',\n  isInstructor: false,\n};\n\nconst initialNewUserFormErrors = {\n  personName: '',\n  email: '',\n  age: '',\n  password: '',\n  isInstructor: '',\n};\n\n\nfunction NewUserForm (props) {\n  const { user, setUser, newUserFormValues, setNewUserFormValues, newUserFormErrors, setNewUserFormErrors, newUserDisabled, setNewUserDisabled } = props\n\n  const history = useHistory();\n\n  // -------------------- Helper Functions -----------------\n\n  const postNewUser = newUser => {\n    axios.post('https://pt-fitness.herokuapp.com/', newUser)\n      .then(res => {\n        setUser(res.data)\n        console.log(\"New User \", res.data);\n        console.log(\"Successful res back from Axios, res.data: \", res.data);\n\n        setNewUserFormValues(initialNewUserFormValues); // reset form\n\n        history.push(`/`); // route to home page\n\n      })\n      .catch(err => {\n        console.log(\"Error: \", err)\n        history.push(`/error`)\n        debugger\n      })\n  } // posts and resets form\n\n  const validate = (name, value) => {\n  console.log(\"validate: \", name, value)\n  // yup.reach(schema, name)\n  //   .validate(value)\n  //   .then(() => setNewUserFormErrors({ ...newUserFormErrors, [name]: ''}))\n  //   .catch(err => setNewUserFormErrors({ ...newUserFormErrors, [name]: err.errors[0] })) // pending schema\n\n    console.log(\"passes form validation\")\n  }; // run validation with yup\n\n  // -------------------- Event Handlers -----------------\n\n  const inputChange = (e) => {\n    const { name, type, value, checked } = e.target;\n    // console.log(`name: ${name}, value: ${value}`);\n    const inputValue = type === 'checkbox' ? checked : value;  // option to include checkbox\n    console.log(\"inputValue: \", inputValue)\n    // validate(name, inputValue);\n    setNewUserFormValues({ ...newUserFormValues, [name]: inputValue }); // [ ] is not an array\n  } \n\n  const formSubmit = (e) => {\n\n    console.log(\"form was submitted\")\n      e.preventDefault(); //  to prevent browser refresh\n\n      const newUser = {\n          personName: newUserFormValues.personName,\n          email: newUserFormValues.email,\n          age: newUserFormValues.age,\n          password: newUserFormValues.password,\n      }\n\n      console.log(\"new user: \", newUser)\n      // postNewUser(newUser) // post new user using helper function postNewUser\n\n      // history.push(`/`); // back to home page\n  };\n\n  // -------------------- Side Effects -----------------\n\n  useEffect(() => {\n    // schema.isValid(newUserFormValues).then(valid => setNewUserDisabled(!valid)) // pending schema\n    // console.log(\"disabled?\")\n    }, [newUserFormValues]); // Adjust the status of 'disabled\" every time formValues changes\n\n  useEffect(() => {\n    console.log(\"The form Errors have changed\", newUserFormErrors)\n  }, [newUserFormErrors]);\n\n\n  return (\n    <>\n        {/* <Header/> */}\n\n        <TextInput\n          type=\"text\"\n          name=\"personName\"\n          placeholder=\" add your name here \"\n          onChange={inputChange} \n          value={newUserFormValues.personName}\n          label={\"Name\"}\n        />\n        <div>{newUserFormErrors.personName}</div>\n\n        <TextInput\n          type=\"text\"\n          name=\"email\"\n          placeholder=\" email address \"\n          onChange={inputChange} \n          value={newUserFormValues.email}\n          label={\"Email\"}\n        />\n        <div>{newUserFormErrors.email}</div>\n\n        <TextInput\n          type=\"text\"\n          name=\"age\"\n          placeholder=\" enter your age \"\n          onChange={inputChange} \n          value={newUserFormValues.age}\n          label={\"Age\"}\n        />\n        <div>{newUserFormErrors.age}</div>\n\n        <TextInput\n          type=\"text\"\n          name=\"password\"\n          placeholder=\" enter new password \"\n          onChange={inputChange} \n          value={newUserFormValues.password}\n          label={\"New Password\"}\n        />\n        <div>{newUserFormErrors.password}</div>\n\n        <p>If you are signing up as an instructor, you should have received an instructor code in an email.</p>\n        <TextInput\n          type=\"text\"\n          name=\"isInstructor\"\n          placeholder=\" Instructor Code\"\n          onChange={inputChange} \n          value={newUserFormValues.isInstructor}\n          label={\"Instructor Code\"}\n        />\n        <br/>\n        <br/>\n        <button  id=\"submitBtn\" disabled={newUserDisabled}>Submit</button> \n\n      {/* <Footer/> */}\n\n    </>\n  )\n}\n\nexport default NewUserForm;","/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/TextInput.js",[],["48","49"],"/Users/qirhi/Desktop/Lambda/lambda-code/lambda-unit-two-projects/anywhere-fitness/src/Components/Footer.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":12},{"ruleId":"54","severity":1,"message":"58","line":33,"column":10,"nodeType":"56","messageId":"57","endLine":33,"endColumn":25},{"ruleId":"54","severity":1,"message":"59","line":33,"column":27,"nodeType":"56","messageId":"57","endLine":33,"endColumn":45},{"ruleId":"54","severity":1,"message":"60","line":34,"column":10,"nodeType":"56","messageId":"57","endLine":34,"endColumn":25},{"ruleId":"54","severity":1,"message":"61","line":34,"column":27,"nodeType":"56","messageId":"57","endLine":34,"endColumn":45},{"ruleId":"54","severity":1,"message":"62","line":35,"column":10,"nodeType":"56","messageId":"57","endLine":35,"endColumn":23},{"ruleId":"54","severity":1,"message":"63","line":35,"column":25,"nodeType":"56","messageId":"57","endLine":35,"endColumn":41},{"ruleId":"54","severity":1,"message":"64","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"65","line":4,"column":13,"nodeType":"56","messageId":"57","endLine":4,"endColumn":16},{"ruleId":"54","severity":1,"message":"66","line":19,"column":7,"nodeType":"56","messageId":"57","endLine":19,"endColumn":31},{"ruleId":"54","severity":1,"message":"67","line":29,"column":11,"nodeType":"56","messageId":"57","endLine":29,"endColumn":15},{"ruleId":"54","severity":1,"message":"68","line":29,"column":86,"nodeType":"56","messageId":"57","endLine":29,"endColumn":106},{"ruleId":"54","severity":1,"message":"69","line":29,"column":125,"nodeType":"56","messageId":"57","endLine":29,"endColumn":143},{"ruleId":"54","severity":1,"message":"70","line":35,"column":9,"nodeType":"56","messageId":"57","endLine":35,"endColumn":20},{"ruleId":"54","severity":1,"message":"71","line":54,"column":9,"nodeType":"56","messageId":"57","endLine":54,"endColumn":17},{"ruleId":"54","severity":1,"message":"72","line":75,"column":9,"nodeType":"56","messageId":"57","endLine":75,"endColumn":19},{"ruleId":"50","replacedBy":"73"},{"ruleId":"52","replacedBy":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'loginFormValues' is assigned a value but never used.","'setLoginFormValues' is assigned a value but never used.","'loginFormErrors' is assigned a value but never used.","'setLoginFormErrors' is assigned a value but never used.","'loginDisabled' is assigned a value but never used.","'setLoginDisabled' is assigned a value but never used.","'useState' is defined but never used.","'yup' is defined but never used.","'initialNewUserFormErrors' is assigned a value but never used.","'user' is assigned a value but never used.","'setNewUserFormErrors' is assigned a value but never used.","'setNewUserDisabled' is assigned a value but never used.","'postNewUser' is assigned a value but never used.","'validate' is assigned a value but never used.","'formSubmit' is assigned a value but never used.",["75"],["76"],"no-global-assign","no-unsafe-negation"]